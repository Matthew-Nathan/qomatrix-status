name: Matrix Tor status

on:
  schedule:
    - cron: "*/8 * * * *"   # every 8 minutes, hopefully
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download existing raw.log artifact
        uses: actions/download-artifact@v4
        with:
          name: raw-log
          path: logs
        continue-on-error: true

      - name: Install Tor + tools
        run: |
          sudo apt-get update
          sudo apt-get install -y tor curl jq

      - name: Start Tor and wait for bootstrap
        run: |
          mkdir -p tor-data
          PORT=$((9050 + RANDOM % 1000))
          echo "$PORT" > tor-port.txt
          tor --SocksPort $PORT --DataDirectory ./tor-data --Log "notice file tor.log" &
          # Wait up to 60s for "Bootstrapped 100%"
          for i in {1..60}; do
            if grep -q "Bootstrapped 100%" tor.log 2>/dev/null; then
              echo "Tor bootstrapped"
              break
            fi
            sleep 1
          done
          echo "Last 20 lines of tor.log:"
          tail -n 20 tor.log || true

      - name: Probe homeserver via Tor
        env:
          MATRIX_ONION: ${{ secrets.MATRIX_ONION }}
        run: |
          set -e
          mkdir -p public logs
          URL="${MATRIX_ONION%/}/_matrix/client/versions"
          echo "Probing $URL"

          STATUS="DOWN"
          CODE=0
          LATENCY_MS=0
          PORT=$(cat tor-port.txt)

          START=$(date +%s%3N || true)
          RESP=$(curl -sS --socks5-hostname 127.0.0.1:$PORT --max-time 20 -w ' HTTPSTATUS:%{http_code}' "$URL" || true)
          END=$(date +%s%3N || true)

          if [ -n "$START" ] && [ -n "$END" ]; then LATENCY_MS=$((END-START)); fi
          CODE="${RESP##*HTTPSTATUS:}"
          # clean up code (strip leading zeros, default 0)
          CODE_CLEAN=$(echo "${CODE:-0}" | sed 's/^0*//')
          [ -z "$CODE_CLEAN" ] && CODE_CLEAN=0

          if [ "$CODE_CLEAN" -ge 200 ] && [ "$CODE_CLEAN" -lt 500 ]; then STATUS="UP"; fi
          TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # latest result
          jq -n --arg status "$STATUS" --argjson code "$CODE_CLEAN" --arg timestamp "$TS" --argjson latency_ms "$LATENCY_MS" \
            '{status:$status, http_code:$code, checked_at:$timestamp, latency_ms:$latency_ms}' > public/status.json

          # raw log
          echo "{\"status\":\"$STATUS\",\"http_code\":$CODE_CLEAN,\"checked_at\":\"$TS\",\"latency_ms\":$LATENCY_MS}" >> logs/raw.log

      - name: Aggregate history
        run: |
          mkdir -p public

          node <<'JS'
          const fs = require("fs");

          // read the raw log (append-only, never truncated by shell)
          if (!fs.existsSync("logs/raw.log")) process.exit(0);
          const lines = fs.readFileSync("logs/raw.log","utf8").trim().split("\n").filter(Boolean);
          const data = lines.map(l => {
            try { return JSON.parse(l); } catch { return null; }
          }).filter(Boolean);

          const cutoff = new Date(Date.now() - 14*24*60*60*1000);

          const buckets = {};
          for (const d of data) {
            const date = new Date(d.checked_at);
            if (date < cutoff) continue;
            const day = date.toISOString().slice(0,10);
            const block = Math.floor(date.getUTCHours()/2); // 0..11
            buckets[day] ??= Array.from({length:12},()=>[]);
            buckets[day][block].push(d.status==="UP"?1:0);
          }

          const history = [];
          for (const [day,blocks] of Object.entries(buckets).sort()) {
            history.push({
              date: day,
              blocks: blocks.map((arr,i)=>({
                time: `${String(i*2).padStart(2,"0")}-${String(i*2+2).padStart(2,"0")}`,
                status: arr.length ? (arr.reduce((a,b)=>a+b,0) > arr.length/2 ? "UP" : "DOWN") : "NO DATA"
              }))
            });
          }

          fs.writeFileSync("public/history.json", JSON.stringify(history,null,2));
          JS

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Upload raw.log artifact
        uses: actions/upload-artifact@v4
        with:
          name: raw-log
          path: logs/raw.log
          retention-days: 15

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
